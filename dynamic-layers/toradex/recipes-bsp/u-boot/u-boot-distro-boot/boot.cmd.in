# SPDX-License-Identifier: GPL-2.0+ OR MIT
#
# Copyright 2020 Toradex
# With SWUpdate integration.
#
# Only supports booting from mmc with partitions as configured in ts-verdin-imx8mm.wks

test -n ${swupdatepart} || env set swupdatepart 2 && env save
test -n ${kernel_image} || env set kernel_image boot/@@KERNEL_IMAGETYPE@@
env set overlays_file "boot/overlays.txt"
env set overlays_prefix "boot/overlays/"
# This should probably set similar to KERNEL_IMAGETYPE above
env set fdtfile boot/imx8mm-verdin-wifi-dahlia.dtb
env set load_cmd 'load mmc 0:\\${swupdatepart}'
env set set_bootcmd_kernel 'env set bootcmd_kernel "${load_cmd} \\${kernel_addr_load} \\${kernel_image}"'
env set set_load_overlays_file 'env set load_overlays_file "${load_cmd} \\${loadaddr} \\${overlays_file}; env import -t \\${loadaddr} \\${filesize}"'
env set fdt_resize 'fdt addr ${fdt_addr_r} && fdt resize 0x20000'
env set set_bootcmd_dtb 'env set bootcmd_dtb "echo Loading DeviceTree: \\${fdtfile}; ${load_cmd} \\${fdt_addr_r} \\${fdtfile}"'
env set set_apply_overlays 'env set apply_overlays "for overlay_file in \\${fdt_overlays}; do echo Applying Overlay: \\${overlay_file} && ${load_cmd} \\${loadaddr} \\${overlays_prefix}\\${overlay_file} && fdt apply \\${loadaddr}; env set overlay_file; done; true"'
env set bootcmd_boot 'echo "Bootargs: \${bootargs}" && booti ${kernel_addr_r} - ${fdt_addr_r}'

run setup
# use booti automatic decompression
env set kernel_addr_load ${loadaddr}
env set rootfsargs_set 'env set rootfsargs root=/dev/mmcblk0p${swupdatepart} ro rootwait'
env set bootcmd_args 'run rootfsargs_set && env set bootargs ${defargs} ${rootfsargs} ${setupargs} ${vidargs} ${tdxargs}'
env set bootcmd_overlays 'run load_overlays_file && run fdt_resize && run apply_overlays'
env set bootcmd_prepare 'run set_bootcmd_kernel; run set_bootcmd_dtb; run set_load_overlays_file; run set_apply_overlays'
env set bootcmd_run 'run bootcmd_dtb && run bootcmd_overlays && run bootcmd_args && run bootcmd_kernel && run bootcmd_boot; echo "Booting from ${devtype} failed!" && false'

run bootcmd_prepare
run bootcmd_run
